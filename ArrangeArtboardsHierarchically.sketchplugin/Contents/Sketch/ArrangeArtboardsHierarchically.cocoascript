var onRun = function(context) {
  var page = context.document.currentPage();
  var doc = context.document;
  var horizontalGutter = 100;
  var verticalGutter = 30;
  var majorVerticalGutter = 100;

  var view;
  if (MSApplicationMetadata.metadata().appVersion < 48) {
    view = doc.currentView();
  } else {
    view = doc.contentDrawView();
  }

  var artboards = page.artboards();
  artboards.sort(sortArtboardsFunction);

  var alreadyProcessed=[];

  var x=0;
  var y=0;

  for(var i=0;i<artboards.length;i++){
    if(alreadyProcessed.indexOf(artboards[i])<0)
    {
      artboards[i].frame().x = 0;
      artboards[i].frame().y = y;


      alreadyProcessed.push(artboards[i]);
    
      //console.log("Allocating "+artboards[i].name()+" to ("+x+","+y+")");
      var nodes = artboards[i].name().split("/");
      var prefix = "";
      var fullPrefix="";
      for(var j=0;j<nodes.length;j++){
        
        if(j<nodes.length-1)
          prefix += nodes[j]+"/";
        
        fullPrefix += nodes[j]+"/";
      }
    
      var yAcc=0;
      var hadChildren=false; 
      if(hasChildren(fullPrefix))
      {
        yAcc = getArtboardDescendants(fullPrefix ,artboards[i].frame().width()+horizontalGutter,y);
        hadChildren=true;
      }
    
      
      if(yAcc > artboards[i].frame().height())
        y += yAcc;
      else
        y += artboards[i].frame().height()
    
      if(hadChildren)
        y+= majorVerticalGutter;
      else
        y+= verticalGutter;


    }
    //else
    //  console.log("Already processed: "+artboards[i].name());

  }


  view.centerLayersInCanvas();
  context.document.showMessage("Hey ho! Artboards arranged!");


  function hasChildren(nodeName){
    var hasChildren=false;

    artboards.forEach(function(artboard)
    {
      var startsbythis = artboard.name().startsWith(nodeName);
      if(startsbythis)
      {
        hasChildren=true;
      }
    });

    return hasChildren;
  }

  function getArtboardDescendants(nodeName, x, y){
    var childrenArtboards = [];

    artboards.forEach(function(artboard)
    {
      var startsbythis = artboard.name().startsWith(nodeName);
      if(startsbythis)
      {
        var clippedName = artboard.name().replace(nodeName,"");
        var firstNode = clippedName.split("/")[0]; 
        if(!containsKey(childrenArtboards, firstNode))
        {
          var node = [firstNode,artboard];
          childrenArtboards.push(node);
        }
      }
    });

    childrenArtboards.sort(sortFunction);
    //console.log(childrenArtboards);

    var incrementY = 0;

    for(var i=0;i<childrenArtboards.length;i++){
      
      if(alreadyProcessed.indexOf(childrenArtboards[i][1])<0)
      {

        childrenArtboards[i][1].frame().x = x;
        childrenArtboards[i][1].frame().y = y + incrementY;

        alreadyProcessed.push(childrenArtboards[i][1]);
        
        //console.log(".    Allocating "+childrenArtboards[i][1].name()+" to ("+x+","+(y + incrementY)+")");
        
        //var yAcc=0;
        var yAcc = getArtboardDescendants(nodeName+childrenArtboards[i][0]+"/", x+childrenArtboards[i][1].frame().width()+horizontalGutter, y + incrementY);
        
        if(yAcc > (y+childrenArtboards[i][1].frame().height()))
          incrementY += yAcc;
        else
          incrementY += childrenArtboards[i][1].frame().height()
        
        
        incrementY+= verticalGutter;
    
        
      }
      //else
      //  console.log("Already processed: "+childrenArtboards[i][1].name());
    }

    return incrementY;
  }

  function containsKey(array, key)
  {
    var contains = false;
    for(var i=0; i<array.length;i++)
    {
      if(array[i][0] == key) contains = true;
    }
    return contains;
  }

  function sortFunction(a, b) {
      if (a[0] === b[0]) {
          return 0;
      }
      else {
          return (a[0] < b[0]) ? -1 : 1;
      }
  }

  function sortArtboardsFunction(a, b) {
      
      if (a.name() === b.name()) {
          return 0;
      }
      else {
          return (a.name() < b.name()) ? -1 : 1;
      }
  }

};
          